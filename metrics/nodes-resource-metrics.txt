Metryki typu Gauge

Metryki typu Gauge przechowują wartość liczbową, która może zarówno rosnąć, jak i maleć. W tym eksporterze są używane do monitorowania pojemności, zasobów alokowalnych, symulowanego użycia oraz statusu węzłów i podów.

Wspólne Etykiety dla Metryk Węzłów: [node_name, hostname, datacenter, spine, block, is_kwok]

node_name: Nazwa węzła w Kubernetes.

hostname: Wartość etykiety kubernetes.io/hostname węzła.

datacenter, spine, block: Wartości etykiet topologii network.topology.kubernetes.io/* węzła.

is_kwok: Wartość logiczna ("true"/"false") wskazująca, czy węzeł jest zarządzany przez KWOK (na podstawie etykiety type=kwok lub providerID zaczynającego się od kwok://).

1.1. Metryki Pojemności Węzła (Capacity)

Te metryki reprezentują całkowite zasoby dostępne na danym węźle, odczytane z API Kubernetes (status.capacity), z potencjalną korektą dla węzłów KWOK.

1.1.1. node_capacity_cpu_cores
* Opis: Całkowita pojemność CPU węzła wyrażona w rdzeniach (cores).
* Typ: Gauge
* Etykiety: Wspólne etykiety węzłów.
* Uwagi: Odczytywana z pola status.capacity.cpu obiektu Node. Dla węzłów KWOK (is_kwok="true") wartość ta jest pomniejszana o sumę żądań CPU podów kindnet-* działających na tym węźle w przestrzeni kube-system, aby lepiej odzwierciedlić realnie dostępną pojemność (zakładając, że Kindnet jest częścią symulowanej infrastruktury). Wartość wynikowa nie będzie mniejsza niż 0.

1.1.2. node_capacity_memory_bytes
* Opis: Całkowita pojemność pamięci węzła wyrażona w bajtach.
* Typ: Gauge
* Etykiety: Wspólne etykiety węzłów.
* Uwagi: Odczytywana z pola status.capacity.memory obiektu Node. Wartości jak '10Gi' są konwertowane na bajty. Dla węzłów KWOK (is_kwok="true") wartość ta jest pomniejszana o sumę żądań pamięci podów kindnet-* działających na tym węźle w przestrzeni kube-system, aby lepiej odzwierciedlić realnie dostępną pojemność. Wartość wynikowa nie będzie mniejsza niż 0.

1.1.3. node_capacity_pods
* Opis: Maksymalna liczba podów, jaką węzeł może obsłużyć.
* Typ: Gauge
* Etykiety: Wspólne etykiety węzłów.
* Uwagi: Odczytywana z pola status.capacity.pods obiektu Node. Ta wartość nie jest korygowana dla węzłów KWOK.

1.1.4. node_capacity_gpu_cards
* Opis: Całkowita pojemność GPU węzła (liczba kart).
* Typ: Gauge
* Etykiety: Wspólne etykiety węzłów.
* Uwagi: Wartość jest pobierana z status.capacity dla pierwszego pasującego klucza z listy KNOWN_GPU_KEYS (np. nvidia.com/gpu, amd.com/gpu). Jeśli żaden znany klucz GPU nie zostanie znaleziony, wartość wynosi 0. Ta wartość nie jest korygowana dla węzłów KWOK.

1.2. Metryki Zasobów Alokowalnych Węzła (Allocatable)

Te metryki reprezentują zasoby węzła dostępne dla podów użytkownika, po odjęciu zasobów zarezerwowanych dla systemu i komponentów Kubernetes, odczytane z API (status.allocatable), z potencjalną korektą dla węzłów KWOK.

1.2.1. node_allocatable_cpu_cores
* Opis: Alokowalne zasoby CPU węzła wyrażone w rdzeniach (cores).
* Typ: Gauge
* Etykiety: Wspólne etykiety węzłów.
* Uwagi: Odczytywana z pola status.allocatable.cpu obiektu Node. Dla węzłów KWOK (is_kwok="true") wartość ta jest pomniejszana o sumę żądań CPU podów kindnet-* działających na tym węźle w przestrzeni kube-system, aby lepiej odzwierciedlić realnie alokowalne zasoby. Wartość wynikowa nie będzie mniejsza niż 0.

1.2.2. node_allocatable_memory_bytes
* Opis: Alokowalne zasoby pamięci węzła wyrażone w bajtach.
* Typ: Gauge
* Etykiety: Wspólne etykiety węzłów.
* Uwagi: Odczytywana z pola status.allocatable.memory obiektu Node. Dla węzłów KWOK (is_kwok="true") wartość ta jest pomniejszana o sumę żądań pamięci podów kindnet-* działających na tym węźle w przestrzeni kube-system, aby lepiej odzwierciedlić realnie alokowalne zasoby. Wartość wynikowa nie będzie mniejsza niż 0.

1.2.3. node_allocatable_pods
* Opis: Liczba podów, które mogą zostać uruchomione na węźle (po uwzględnieniu rezerwacji systemowych).
* Typ: Gauge
* Etykiety: Wspólne etykiety węzłów.
* Uwagi: Odczytywana z pola status.allocatable.pods obiektu Node. Ta wartość nie jest korygowana dla węzłów KWOK.

1.2.4. node_allocatable_gpu_cards
* Opis: Alokowalne zasoby GPU węzła (liczba kart).
* Typ: Gauge
* Etykiety: Wspólne etykiety węzłów.
* Uwagi: Wartość jest pobierana z status.allocatable dla pierwszego pasującego klucza z listy KNOWN_GPU_KEYS. Jeśli żaden znany klucz GPU nie zostanie znaleziony, wartość wynosi 0. Ta wartość nie jest korygowana dla węzłów KWOK.

1.3. Metryki Symulowanego Wykorzystania Węzła (Simulated Usage)

Te metryki reprezentują sumę efektywnych żądań (requests) zasobów przez wszystkie nieterminalne pody (inne niż Succeeded, Failed, Unknown) uruchomione na danym węźle. Nie jest to rzeczywiste użycie zasobów. Efektywne żądanie dla poda = max(suma_żądań_kontenerów_głównych, max(żądanie_kontenera_init)) dla każdego zasobu (CPU, pamięć, GPU).
Ważne: Dla węzłów KWOK (is_kwok="true"), pody infrastrukturalne kube-proxy-* i kindnet-* z przestrzeni kube-system są ignorowane i nie wliczają się do tych sum.

1.3.1. node_simulated_usage_cpu_cores
* Opis: Symulowane wykorzystanie CPU węzła bazujące na sumie efektywnych żądań CPU podów na tym węźle, wyrażone w rdzeniach.
* Typ: Gauge
* Etykiety: Wspólne etykiety węzłów.
* Uwagi: Agreguje efektywne żądania CPU (spec.containers[*].resources.requests.cpu, spec.initContainers[*].resources.requests.cpu) wszystkich nieterminalnych podów przypisanych do węzła (z wyjątkiem podów infra kube-proxy-*/kindnet-* z kube-system na węzłach KWOK).

1.3.2. node_simulated_usage_memory_bytes
* Opis: Symulowane wykorzystanie pamięci węzła bazujące na sumie efektywnych żądań pamięci podów na tym węźle, wyrażone w bajtach.
* Typ: Gauge
* Etykiety: Wspólne etykiety węzłów.
* Uwagi: Agreguje efektywne żądania pamięci (spec.containers[*].resources.requests.memory, spec.initContainers[*].resources.requests.memory) wszystkich nieterminalnych podów przypisanych do węzła (z wyjątkiem podów infra kube-proxy-*/kindnet-* z kube-system na węzłach KWOK).

1.3.3. node_simulated_pod_count
* Opis: Liczba nieterminalnych podów (innych niż Succeeded, Failed, Unknown) aktualnie przypisanych do węzła.
* Typ: Gauge
* Etykiety: Wspólne etykiety węzłów.
* Uwagi: Zlicza pody z listy pobranej z API (po odfiltrowaniu stanów terminalnych), które mają ustawione spec.nodeName na ten węzeł. Dla węzłów KWOK (is_kwok="true"), pody kube-proxy-* i kindnet-* z kube-system nie są wliczane do tej sumy.

1.3.4. node_simulated_usage_gpu_cards
* Opis: Symulowane wykorzystanie GPU węzła bazujące na sumie efektywnych żądań GPU (dla znanych kluczy jak nvidia.com/gpu, amd.com/gpu itd.) podów na tym węźle.
* Typ: Gauge
* Etykiety: Wspólne etykiety węzłów.
* Uwagi: Agreguje efektywne żądania GPU (dla kluczy z KNOWN_GPU_KEYS) wszystkich nieterminalnych podów przypisanych do węzła (z wyjątkiem podów infra kube-proxy-*/kindnet-* z kube-system na węzłach KWOK).

1.4. Metryka Statusu Węzła

1.4.1. node_status_ready
* Opis: Status gotowości węzła.
* Typ: Gauge
* Etykiety: Wspólne etykiety węzłów.
* Uwagi: Przyjmuje wartość 1, jeśli warunek Ready w status.conditions ma status True, w przeciwnym razie 0.

1.5. Metryka Klasterowa (Cluster-wide)

1.5.1. cluster_unscheduled_pods_count
* Opis: Liczba nieterminalnych podów w całym klastrze, które są w fazie Pending i nie mają przypisanego żadnego węzła (spec.nodeName jest pusty).
* Typ: Gauge
* Etykiety: Brak
* Uwagi: Jest to metryka globalna dla klastra. Zlicza pody zwrócone przez API po zastosowaniu filtra field_selector=status.phase!=Succeeded,status.phase!=Failed,status.phase!=Unknown, które nie mają ustawionego spec.nodeName. Wskazuje na liczbę nieterminalnych podów oczekujących na decyzję schedulera.
