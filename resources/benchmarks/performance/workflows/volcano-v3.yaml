# Copyright (c) 2024, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: volcano-performance-benchmark
description: |
  A comprehensive benchmark for Volcano's scheduling performance that gradually
  increases load to test scheduling throughput and efficiency.
tasks:
# Configure node
- id: configure-nodes
  type: Configure
  params:
    nodes:
    - type: hpc.gpu
      count: 500
      labels:
        nvidia.com/gpu.count: "8"
        nvidia.com/mlnxnics:  "16"
        nvidia.com/gpu.product: NVIDIA-A100-SXM4-80GB
      resources:
        cpu: 128
        memory: "128Gi"
        pods: 110
        nvidia.com/gpu: 8
        hugepages-1Gi: 0
        hugepages-2Mi: 0
        ephemeral-storage: "30Ti"
    timeout: 5m

# Configure Volcano settings
- id: configure-volcano
  type: Configure
  params:
    configmaps:
    - name: volcano-scheduler-configmap
      namespace: volcano-system
      op: create
      data:
        volcano-scheduler.conf: |
          actions: "enqueue, allocate, backfill"
          tiers:
          - plugins:
            - name: priority
            - name: gang
            - name: conformance
          - plugins:
            - name: drf
            - name: predicates
            - name: proportion
            - name: nodeorder
            - name: binpack
    deploymentRestarts:
    - namespace: volcano-system
      name: volcano-scheduler
    - namespace: volcano-system
      name: volcano-controllers
    timeout: 10m

# Register Volcano-specific resources
- id: register-job
  type: RegisterObj
  params:
    template: "resources/benchmarks/performance/templates/volcano/job.yaml"
    nameFormat: "perftest-job{{._ENUM_}}"
    podNameFormat: "{{._NAME_}}-test-[0-9]+"
    podCount: "{{.replicas}}"

# Warmup phase - submit small batch to get system ready
- id: warmup-batch
  type: SubmitObj
  params:
    refTaskId: register-job
    count: 20
    params:
      namespace: default
      replicas: 1
      priorityClassName: "normal-priority"
      image: ubuntu
      cpu: 1
      memory: 128Mi
      gpu: 1
      ttl: "15s"

- id: delay0
  type: Sleep
  params:
    timeout: 10s

# Wave 1: Submit first batch of 50 jobs
- id: wave1
  type: SubmitObj
  params:
    refTaskId: register-job
    count: 50
    params:
      namespace: default
      replicas: 1
      priorityClassName: "normal-priority"
      image: ubuntu
      cpu: 1
      memory: 128Mi
      gpu: 1
      ttl: "30s"

# Brief delay between waves
- id: delay1
  type: Sleep
  params:
    timeout: 10s

# Wave 2: Submit second batch of 50 jobs
- id: wave2
  type: SubmitObj
  params:
    refTaskId: register-job
    count: 50
    params:
      namespace: default
      replicas: 1
      priorityClassName: "normal-priority"
      image: ubuntu
      cpu: 1
      memory: 128Mi
      gpu: 1
      ttl: "30s"

# Brief delay between waves
- id: delay2
  type: Sleep
  params:
    timeout: 10s

# Wave 3: Submit third batch of 50 jobs
- id: wave3
  type: SubmitObj
  params:
    refTaskId: register-job
    count: 50
    params:
      namespace: default
      replicas: 1
      priorityClassName: "normal-priority"
      image: ubuntu
      cpu: 1
      memory: 128Mi
      gpu: 1
      ttl: "30s"

# Brief delay between waves
- id: delay3
  type: Sleep
  params:
    timeout: 10s

# Wave 4: Submit fourth batch of 50 jobs
- id: wave4
  type: SubmitObj
  params:
    refTaskId: register-job
    count: 50
    params:
      namespace: default
      replicas: 1
      priorityClassName: "normal-priority"
      image: ubuntu
      cpu: 1
      memory: 128Mi
      gpu: 1
      ttl: "30s"

# Brief delay between waves
- id: delay4
  type: Sleep
  params:
    timeout: 15s

# Peak load test: Submit larger batch of 200 jobs at once
- id: peak-load
  type: SubmitObj
  params:
    refTaskId: register-job
    count: 200
    params:
      namespace: default
      replicas: 1
      priorityClassName: "normal-priority"
      image: ubuntu
      cpu: 1
      memory: 128Mi
      gpu: 1
      ttl: "30s"

# Allow time for peak load processing
- id: peak-processing
  type: Sleep
  params:
    timeout: 60s
