name: volcano-fair-share-benchmark-historical-priority
description: |
  Historical Priority Fair Share benchmark for Volcano.

  Tests if historical under/over-usage influences the initial scheduling priority
  when multiple queues with different weights (3:2:1) compete for resources
  after a period of unequal usage. Aims to emulate aspects of SLURM's fair share.
  Volcano uses the DRF and Proportion plugins, along with queue weights,
  to manage fair sharing. This test observes if historical usage affects
  the initial allocation decisions.

  Scenario:
  1. Configure a homogeneous cluster (40 CPU, 160 GiB RAM).
  2. Configure Volcano with DRF and Proportion plugins enabled.
  3. Create three queues (A: weight 3, B: weight 2, C: weight 1) with NO guarantees.
  4. Phase 1: Build historical usage contrast (A: High, B: Medium, C: None/Very Low).
  5. Phase 2: Submit a large burst of jobs to ALL queues nearly simultaneously.
  6. Observe: Does Queue C get a higher initial allocation rate than its 1/6 weight share?
     Does the system eventually converge towards the 3:2:1 ratio?
tasks:
  # Configure Volcano
  - id: configure-volcano
    type: Configure
    params:
      configmaps:
        - name: volcano-scheduler-configmap
          namespace: volcano-system
          op: create
          data:
            volcano-scheduler.conf: |
              actions: "enqueue, allocate, reclaim"
              tiers:
              - plugins:
                - name: priority
              - plugins:
                - name: drf
                  enablePreemptable: true
                - name: predicates
                - name: proportion
                - name: nodeorder
                - name: binpack
      deploymentRestarts:
        - namespace: volcano-system
          name: volcano-scheduler
      timeout: 10m

  - id: config-sleep
    type: Sleep
    params:
      timeout: 5s

  # Configure nodes (10 nodes, 10 CPU/40GB each = 100 CPU/400GB total)
  - id: configure-nodes
    type: Configure
    params:
      nodes:
        - type: cpu-node
          count: 10
          resources:
            cpu: 10100m # ~10 CPU available per node
            memory: "10050Mi" # ~40 GB available per node
            pods: 110
      timeout: 5m

  # Create namespaces for the three tenants
  - id: create-namespaces
    type: Configure
    params:
      namespaces:
        - name: tenant-a
          op: create
        - name: tenant-b
          op: create
        - name: tenant-c
          op: create
      timeout: 1m

  # Register queue template
  - id: register-queue
    type: RegisterObj
    params:
      template: "resources/benchmarks/fair-share/templates/volcano/queue.yml"

  # Register job templates
  - id: register-job-phase1-tenant-a
    type: RegisterObj
    params:
      template: "resources/benchmarks/fair-share/templates/volcano/job.yml"
      nameFormat: "v4-p1-a-job{{._ENUM_}}"
      podNameFormat: "{{._NAME_}}-test-[0-9]+"
      podCount: "{{.replicas}}"

  - id: register-job-phase1-tenant-b
    type: RegisterObj
    params:
      template: "resources/benchmarks/fair-share/templates/volcano/job.yml"
      nameFormat: "v4-p1-b-job{{._ENUM_}}"
      podNameFormat: "{{._NAME_}}-test-[0-9]+"
      podCount: "{{.replicas}}"

  # No registration needed for Tenant C Phase 1 (no jobs)

  - id: register-job-phase2-a
    type: RegisterObj
    params:
      template: "resources/benchmarks/fair-share/templates/volcano/job.yml"
      nameFormat: "v4-p2-a-job{{._ENUM_}}"
      podNameFormat: "{{._NAME_}}-test-[0-9]+"
      podCount: "{{.replicas}}"

  - id: register-job-phase2-b
    type: RegisterObj
    params:
      template: "resources/benchmarks/fair-share/templates/volcano/job.yml"
      nameFormat: "v4-p2-b-job{{._ENUM_}}"
      podNameFormat: "{{._NAME_}}-test-[0-9]+"
      podCount: "{{.replicas}}"

  - id: register-job-phase2-c
    type: RegisterObj
    params:
      template: "resources/benchmarks/fair-share/templates/volcano/job.yml"
      nameFormat: "v4-p2-c-job{{._ENUM_}}"
      podNameFormat: "{{._NAME_}}-test-[0-9]+"
      podCount: "{{.replicas}}"

  # Create queues with equal weights
  - id: create-queue-a
    type: SubmitObj
    params:
      refTaskId: register-queue
      canExist: true
      params:
        name: "tenant-a-queue"
        reclaimable: true
        priority: 1
        weight: 3 # WEIGHT 3
        capability: # Set to cluster capacity
          cpu: 100000m # ~100 CPU
          memory: 100000Mi # ~100 GiB

  - id: create-queue-b
    type: SubmitObj
    params:
      refTaskId: register-queue
      canExist: true
      params:
        name: "tenant-b-queue"
        reclaimable: true
        priority: 1
        weight: 2 # WEIGHT 2
        capability: # Set to cluster capacity
          cpu: 100000m # ~100 CPU
          memory: 100000Mi # ~100 GiB

  - id: create-queue-c
    type: SubmitObj
    params:
      refTaskId: register-queue
      canExist: true
      params:
        name: "tenant-c-queue"
        reclaimable: true
        priority: 1
        weight: 1 # WEIGHT 1
        capability: # Set to cluster capacity
          cpu: 100000m # ~100 CPU
          memory: 100000Mi # ~100 GiB

  # --- Phase 1: Build Usage History (5 minutes) ---
  - id: phase1-history-building
    type: Repeat
    params:
      duration: 5m
      interval: 5s
      tasks:
        # Tenant A: High Load
        - type: SubmitObj
          params:
            refTaskId: register-job-phase1-tenant-a
            count: 2
            params:
              namespace: tenant-a
              queue: tenant-a-queue
              replicas: 1
              cpu: 1000m
              memory: 1000Mi
              ttl: "30s"

        # Tenant B: Medium Load
        - type: SubmitObj
          params:
            refTaskId: register-job-phase1-tenant-b
            count: 1
            params:
              namespace: tenant-b
              queue: tenant-b-queue
              replicas: 1
              cpu: 1000m
              memory: 1000Mi
              ttl: "30s"

        # Tenant C: No Load (do nothing in this step of the loop)

  # --- Short pause to ensure Phase 1 load generation finishes ---
  - id: stabilize-after-phase1
    type: Sleep
    params: { timeout: 60s }

  # --- Phase 2: Saturation Burst and Initial Observation ---
  # Submit a burst of jobs SIMULTANEOUSLY using Parallel task
  - id: phase2-parallel-burst
    type: Parallel
    params:
      tasks:
        - type: SubmitObj
          params:
            refTaskId: register-job-phase2-a
            count: 50
            params:
              namespace: tenant-a
              queue: tenant-a-queue
              replicas: 1
              cpu: 1000m
              memory: 1000Mi
              ttl: "2m" # Longer TTL for observation

        - type: SubmitObj
          params:
            refTaskId: register-job-phase2-b
            count: 50
            params:
              namespace: tenant-b
              queue: tenant-b-queue
              replicas: 1
              cpu: 1000m
              memory: 1000Mi
              ttl: "2m" # Longer TTL for observation

        - type: SubmitObj
          params:
            refTaskId: register-job-phase2-c
            count: 50
            params:
              namespace: tenant-c
              queue: tenant-c-queue
              replicas: 1
              cpu: 1000m
              memory: 1000Mi
              ttl: "2m" # Longer TTL for observation
