name: yunikorn-fair-share-benchmark-v3
description: |
  Fair Share benchmark for Apache YuniKorn scheduler in a heterogeneous environment.

  This benchmark tests whether YuniKorn properly implements fair resource sharing
  through Dominant Resource Fairness (DRF) in a heterogeneous cluster. YuniKorn uses
  a hierarchical queue structure to determine fair shares.

  The test sets up a cluster with nodes of different resource profiles and three child
  queues under a parent queue with equal weights but different dominant resources:
  - Tenant A is CPU-dominated
  - Tenant B is memory-dominated
  - Tenant C is GPU-dominated

  Test scenario:
  1. Configure heterogeneous cluster with 12 nodes of different resource profiles
  2. Configure YuniKorn with three queues having equal weights
  3. Submit jobs to all queues in three balanced rounds
  4. Verify that dominant resources are distributed fairly between queues
tasks:
  # Configure YuniKorn
  - id: configure-yunikorn
    type: Configure
    params:
      configmaps:
        - name: yunikorn-configs
          namespace: yunikorn
          op: create
          data:
            queues.yaml: |
              partitions:
                - name: default
                  placementrules:
                    - name: provided
                      create: false
                  queues:
                  - name: root
                    submitacl: '*'
                    queues:
                    - name: fairshare
                      submitacl: '*'
                      properties:
                        application.sort.policy: fair
                        preemption.policy: fence
                        preemption.delay: 10s
                      queues:
                      - name: tenant-a
                        submitacl: '*'
                        properties:
                          application.sort.policy: fifo
                          priority.offset: "0"
                        resources:
                          guaranteed:
                            memory: 0Mi
                            vcore: 0m
                            nvidia.com/gpu: 0
                          max:
                            memory: 1536000Mi
                            vcore: 384000m
                            nvidia.com/gpu: 16
                      - name: tenant-b
                        submitacl: '*'
                        properties:
                          application.sort.policy: fifo
                          priority.offset: "0"
                        resources:
                          guaranteed:
                            memory: 0Mi
                            vcore: 0m
                            nvidia.com/gpu: 0
                          max:
                            memory: 1536000Mi
                            vcore: 384000m
                            nvidia.com/gpu: 16
                      - name: tenant-c
                        submitacl: '*'
                        properties:
                          application.sort.policy: fifo
                          priority.offset: "0"
                        resources:
                          guaranteed:
                            memory: 0Mi
                            vcore: 0m
                            nvidia.com/gpu: 0
                          max:
                            memory: 1536000Mi
                            vcore: 384000m
                            nvidia.com/gpu: 16
      deploymentRestarts:
        - namespace: yunikorn
          name: yunikorn-scheduler
      timeout: 10m

  - id: config-sleep
    type: Sleep
    params:
      timeout: 5s

  # Configure heterogeneous nodes
  # Cluster capacity:
  # CPU: 384000m
  # Memory: 1536000Mi
  # Pods: 1320
  # GPU: 16
  - id: configure-nodes
    type: Configure
    params:
      nodes:
        # Typ A: CPU-intensive (4 węzły)
        - type: cpu-node
          count: 4
          labels:
            node-type: cpu-intensive
            nvidia.com/gpu.count: "0"
          resources:
            cpu: 64100m # 64 rdzenie + 100m na system KWOK
            memory: "64050Mi" # 64GB + 50Mi na system KWOK
            pods: 110
            nvidia.com/gpu: 0

        # Typ B: RAM-intensive (4 węzły)
        - type: ram-node
          count: 4
          labels:
            node-type: ram-intensive
            nvidia.com/gpu.count: "0"
          resources:
            cpu: 16100m # 16 rdzeni + 100m na system KWOK
            memory: "256050Mi" # 256GB + 50Mi na system KWOK
            pods: 110
            nvidia.com/gpu: 0

        # Typ C: GPU-enabled (4 węzły)
        - type: gpu-node
          count: 4
          labels:
            node-type: gpu-enabled
            nvidia.com/gpu.count: "4"
          resources:
            cpu: 16100m # 16 rdzeni + 100m na system KWOK
            memory: "64050Mi" # 64GB + 50Mi na system KWOK
            pods: 110
            nvidia.com/gpu: 4
      timeout: 5m

  # Create namespaces for the three tenants
  - id: create-namespaces
    type: Configure
    params:
      namespaces:
        - name: tenant-a
          op: create
        - name: tenant-b
          op: create
        - name: tenant-c
          op: create
      timeout: 1m

  # Register job templates for different batches
  - id: register-job-batch-1
    type: RegisterObj
    params:
      template: "resources/benchmarks/fair-share/templates/yunikorn/job.yml"
      nameFormat: "fairshare-v3-batch1-job{{._ENUM_}}"
      podNameFormat: "{{._NAME_}}-.*"
      podCount: "{{.replicas}}"

  - id: register-job-batch-2
    type: RegisterObj
    params:
      template: "resources/benchmarks/fair-share/templates/yunikorn/job.yml"
      nameFormat: "fairshare-v3-batch2-job{{._ENUM_}}"
      podNameFormat: "{{._NAME_}}-.*"
      podCount: "{{.replicas}}"

  - id: register-job-batch-3
    type: RegisterObj
    params:
      template: "resources/benchmarks/fair-share/templates/yunikorn/job.yml"
      nameFormat: "fairshare-v3-batch3-job{{._ENUM_}}"
      podNameFormat: "{{._NAME_}}-.*"
      podCount: "{{.replicas}}"

  # Runda 1: Pierwszy batch zadań dla wszystkich najemców
  - id: submit-jobs-tenant-a-batch1
    type: SubmitObj
    params:
      refTaskId: register-job-batch-1
      count: 100
      params:
        namespace: tenant-a
        replicas: 1
        queue: root.fairshare.tenant-a
        cpu: 4000m # 4 rdzenie CPU
        memory: 4000Mi # 4GB RAM
        ttl: 5m

  - id: wait-between-tenants1a
    type: Sleep
    params:
      timeout: 10s

  - id: submit-jobs-tenant-b-batch1
    type: SubmitObj
    params:
      refTaskId: register-job-batch-1
      count: 100
      params:
        namespace: tenant-b
        replicas: 1
        queue: root.fairshare.tenant-b
        cpu: 1000m # 1 rdzeń CPU
        memory: 16000Mi # 16GB RAM
        ttl: 5m

  - id: wait-between-tenants1b
    type: Sleep
    params:
      timeout: 10s

  - id: submit-jobs-tenant-c-batch1
    type: SubmitObj
    params:
      refTaskId: register-job-batch-1
      count: 50
      params:
        namespace: tenant-c
        replicas: 1
        queue: root.fairshare.tenant-c
        cpu: 1000m # 1 rdzeń CPU
        memory: 4000Mi # 4GB RAM
        gpu: 1 # 1 GPU
        ttl: 5m

  - id: wait-between-rounds1
    type: Sleep
    params:
      timeout: 9600s

  # Runda 2: Drugi batch zadań dla wszystkich najemców
  - id: submit-jobs-tenant-a-batch2
    type: SubmitObj
    params:
      refTaskId: register-job-batch-2
      count: 100
      params:
        namespace: tenant-a
        replicas: 1
        queue: root.fairshare.tenant-a
        cpu: 4000m # 4 rdzenie CPU
        memory: 4000Mi # 4GB RAM
        ttl: 5m

  - id: wait-between-tenants2a
    type: Sleep
    params:
      timeout: 10s

  - id: submit-jobs-tenant-b-batch2
    type: SubmitObj
    params:
      refTaskId: register-job-batch-2
      count: 100
      params:
        namespace: tenant-b
        replicas: 1
        queue: root.fairshare.tenant-b
        cpu: 1000m # 1 rdzeń CPU
        memory: 16000Mi # 16GB RAM
        ttl: 5m

  - id: wait-between-tenants2b
    type: Sleep
    params:
      timeout: 10s

  - id: submit-jobs-tenant-c-batch2
    type: SubmitObj
    params:
      refTaskId: register-job-batch-2
      count: 50
      params:
        namespace: tenant-c
        replicas: 1
        queue: root.fairshare.tenant-c
        cpu: 1000m # 1 rdzeń CPU
        memory: 4000Mi # 4GB RAM
        gpu: 1 # 1 GPU
        ttl: 5m

  - id: wait-between-rounds2
    type: Sleep
    params:
      timeout: 30s

  # Runda 3: Trzeci batch zadań dla wszystkich najemców
  - id: submit-jobs-tenant-a-batch3
    type: SubmitObj
    params:
      refTaskId: register-job-batch-3
      count: 100
      params:
        namespace: tenant-a
        replicas: 1
        queue: root.fairshare.tenant-a
        cpu: 4000m # 4 rdzenie CPU
        memory: 4000Mi # 4GB RAM
        ttl: 5m

  - id: wait-between-tenants3a
    type: Sleep
    params:
      timeout: 10s

  - id: submit-jobs-tenant-b-batch3
    type: SubmitObj
    params:
      refTaskId: register-job-batch-3
      count: 100
      params:
        namespace: tenant-b
        replicas: 1
        queue: root.fairshare.tenant-b
        cpu: 1000m # 1 rdzeń CPU
        memory: 16000Mi # 16GB RAM
        ttl: 5m

  - id: wait-between-tenants3b
    type: Sleep
    params:
      timeout: 10s

  - id: submit-jobs-tenant-c-batch3
    type: SubmitObj
    params:
      refTaskId: register-job-batch-3
      count: 50
      params:
        namespace: tenant-c
        replicas: 1
        queue: root.fairshare.tenant-c
        cpu: 1000m # 1 rdzeń CPU
        memory: 4000Mi # 4GB RAM
        gpu: 1 # 1 GPU
        ttl: 5m
