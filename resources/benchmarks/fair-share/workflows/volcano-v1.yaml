name: volcano-fair-share-benchmark-v1
description: |
  Fair Share benchmark dla schedulera Volcano.

  Test sprawdza, czy Volcano prawidłowo implementuje mechanizm fair sharing
  pomiędzy kolejkami o równych wagach i priorytetach. Tworzy trzy oddzielne przestrzenie
  nazw i kolejki z równymi wagami i gwarancjami zasobów. Test następnie wysyła
  zadania do wszystkich kolejek i weryfikuje sprawiedliwy podział zasobów.

  Volcano implementuje mechanizm fair-sharing poprzez plugin DRF
  (Dominant Resource Fairness) oraz konfigurację wag w definicjach kolejek.

  Scenariusz testu:
  1. Konfiguracja klastra z ograniczonymi zasobami CPU (75 CPU łącznie)
  2. Konfiguracja Volcano z włączonym pluginem DRF
  3. Utworzenie trzech przestrzeni nazw i kolejek o równych wagach
  4. Wysłanie zadań sekwencyjnie do wszystkich kolejek
  5. Weryfikacja równego podziału zasobów między kolejkami (~25 CPU dla każdej)
tasks:
  # Configure Volcano
  - id: configure-volcano
    type: Configure
    params:
      configmaps:
        - name: volcano-scheduler-configmap
          namespace: volcano-system
          op: create
          data:
            volcano-scheduler.conf: |
              actions: "enqueue, allocate, backfill, preempt, reclaim"
              tiers:
              - plugins:
                - name: priority
                - name: gang
              - plugins:
                - name: drf  # Dominant Resource Fairness plugin for fair sharing
                  enablePreemptable: true  # Allow preemption for fair sharing
                - name: predicates
                - name: capacity # capacity plugin must be enabled
                  enableHierarchy: true # enable hierarchical queue
                - name: nodeorder
                - name: binpack
      deploymentRestarts:
        - namespace: volcano-system
          name: volcano-scheduler
      timeout: 10m

  - id: config-sleep
    type: Sleep
    params:
      timeout: 5s

  # Configure nodes
  - id: configure-nodes
    type: Configure
    params:
      nodes:
        - type: cpu-node
          count: 5
          resources:
            cpu: 15100m # KWOK potrzebuje 100m → 15000m dostępne
            memory: "15050Mi" # KWOK potrzebuje 50Mi → 15000Mi dostępne
            pods: 110
      timeout: 5m

  # Register queue template
  - id: register-queue
    type: RegisterObj
    params:
      template: "resources/benchmarks/fair-share/templates/volcano/queue.yml"

  # Register job template
  - id: register-job-a
    type: RegisterObj
    params:
      template: "resources/benchmarks/fair-share/templates/volcano/job.yml"
      nameFormat: "a-fairshare-v1-job{{._ENUM_}}"
      podNameFormat: "{{._NAME_}}-test-[0-9]+"
      podCount: "{{.replicas}}"

  # Register job template
  - id: register-job-b
    type: RegisterObj
    params:
      template: "resources/benchmarks/fair-share/templates/volcano/job.yml"
      nameFormat: "b-fairshare-v1-job{{._ENUM_}}"
      podNameFormat: "{{._NAME_}}-test-[0-9]+"
      podCount: "{{.replicas}}"

  # Register job template
  - id: register-job-c
    type: RegisterObj
    params:
      template: "resources/benchmarks/fair-share/templates/volcano/job.yml"
      nameFormat: "c-fairshare-v1-job{{._ENUM_}}"
      podNameFormat: "{{._NAME_}}-test-[0-9]+"
      podCount: "{{.replicas}}"

  # Create queues with equal weights
  - id: create-queue-a
    type: SubmitObj
    params:
      refTaskId: register-queue
      canExist: true
      params:
        name: "tenant-a-queue"
        reclaimable: true
        weight: 100 # Równa waga
        priority: 100
        guarantee:
          resource:
            cpu: "25000m" # Gwarantowane 25 CPU - zawsze zarezerwowane
            memory: "25000Mi"
        capability:
          cpu: "75000m" # Maksymalne 75 CPU - twardy limit
          memory: "75000Mi"

  - id: create-queue-b
    type: SubmitObj
    params:
      refTaskId: register-queue
      canExist: true
      params:
        name: "tenant-b-queue"
        reclaimable: true
        weight: 100 # Równa waga
        priority: 100
        guarantee:
          resource:
            cpu: "25000m" # Gwarantowane 25 CPU - zawsze zarezerwowane
            memory: "25000Mi"
        capability:
          cpu: "75000m" # Maksymalne 75 CPU - twardy limit
          memory: "75000Mi"

  - id: create-queue-c
    type: SubmitObj
    params:
      refTaskId: register-queue
      canExist: true
      params:
        name: "tenant-c-queue"
        reclaimable: true
        weight: 100 # Równa waga
        priority: 100
        guarantee:
          resource:
            cpu: "25000m" # Gwarantowane 25 CPU - zawsze zarezerwowane
            memory: "25000Mi"
        capability:
          cpu: "75000m" # Maksymalne 75 CPU - twardy limit
          memory: "75000Mi"

  # Submit 75 jobs for tenant A (requesting 75000m CPU & 7500 Mi Memory - whole free worker nodes resources)
  - id: submit-jobs-tenant-a
    type: SubmitObj
    params:
      refTaskId: register-job-a
      count: 75
      params:
        namespace: default
        minAvailable: 1
        replicas: 1
        queue: tenant-a-queue
        image: ubuntu
        cpu: 1000m
        memory: 1000Mi
        ttl: "5m"

  - id: wait-a
    type: Sleep
    params:
      timeout: 30s

  # Submit 75 jobs for tenant B (requesting 75000m CPU & 7500 Mi Memory - whole free worker nodes resources)
  - id: submit-jobs-tenant-b
    type: SubmitObj
    params:
      refTaskId: register-job-b
      count: 75
      params:
        namespace: default
        minAvailable: 1
        replicas: 1
        queue: tenant-b-queue
        image: ubuntu
        cpu: 1000m
        memory: 1000Mi
        ttl: "5m"

  - id: wait-b
    type: Sleep
    params:
      timeout: 30s

  # Submit 75 jobs for tenant C (requesting 75000m CPU & 7500 Mi Memory - whole free worker nodes resources)
  - id: submit-jobs-tenant-c
    type: SubmitObj
    params:
      refTaskId: register-job-c
      count: 75
      params:
        namespace: default
        minAvailable: 1
        replicas: 1
        queue: tenant-c-queue
        image: ubuntu
        cpu: 1000m
        memory: 1000Mi
        ttl: "5m"
