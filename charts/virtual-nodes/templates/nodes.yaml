{{/*
# Iterate over node types
*/}}
{{- range $node := .Values.nodes }}

{{/*
# Default params that can be overridden by each node type as appropriate
*/}}
{{- $params := dict }}

{{/*
# Default params that can be overridden by each node type as appropriate
*/}}
{{- $params := dict }}

{{/*
# The default set of resources for all node types
*/}}
{{- $defaultResources := dict }}
{{- $defaultResources = set $defaultResources "cpu" 32 }}
{{- $defaultResources = set $defaultResources "memory" "256Gi" }}
{{- $defaultResources = set $defaultResources "pods" 110 }}
{{- $defaultResources = set $defaultResources "nvidia.com/gpu" 0 }}
{{- $defaultResources = set $defaultResources "nvidia.com/mlnxnics" 0 }}
{{- $defaultResources = set $defaultResources "hugepages-1Gi" 0 }}
{{- $defaultResources = set $defaultResources "hugepages-2Mi" 0 }}

{{/*
# Merge default resources with node-specific resources if they exist
*/}}
{{- $resources := deepCopy $defaultResources }}
{{- if $node.resources }}
  {{- range $key, $value := $node.resources }}
    {{- $resources = set $resources $key $value }}
  {{- end }}
{{- end }}
{{- $params = set $params "resources" $resources }}

{{- $count := ($node.count | int) }}
{{- range until $count }}
{{- $suffix := ( randAlphaNum 6 | lower ) }}
---
apiVersion: v1
kind: Node
metadata:
  annotations:
    node.alpha.kubernetes.io/ttl: "0"
    kwok.x-k8s.io/node: fake
    {{- range $key, $value := $node.annotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  labels:
    beta.kubernetes.io/arch: amd64
    beta.kubernetes.io/os: linux
    kubernetes.io/arch: amd64
    kubernetes.io/hostname: virtual-{{ $node.type }}-{{ $suffix }}
    kubernetes.io/os: linux
    kubernetes.io/role: agent
    node-role.kubernetes.io/agent: ""
    type: kwok
    {{- range $key, $value := $node.labels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  name: virtual-{{ $node.type }}-{{ $suffix }}
status:
  conditions:
  - message: kubelet has sufficient memory available
    reason: KubeletHasSufficientMemory
    status: "False"
    type: MemoryPressure
  - message: kubelet has no disk pressure
    reason: KubeletHasNoDiskPressure
    status: "False"
    type: DiskPressure
  - message: kubelet has sufficient PID available
    reason: KubeletHasSufficientPID
    status: "False"
    type: PIDPressure
  - message: kubelet is posting ready status. AppArmor enabled
    reason: KubeletReady
    status: "True"
    type: Ready
  {{- range $condition := $node.conditions }}
  - message: {{ $condition.message }}
    reason: {{ $condition.reason }}
    status: {{ $condition.status | quote }}
    type: {{ $condition.type }}
  {{- end }}
  allocatable:
    {{- range $key, $value := $params.resources }}
      {{ $key }}: {{ $value }}
    {{- end }}
  capacity:
    {{- range $key, $value := $params.resources }}
      {{ $key }}: {{ $value }}
    {{- end }}
  nodeInfo:
    architecture: amd64
    bootID: ""
    containerRuntimeVersion: ""
    kernelVersion: ""
    kubeProxyVersion: fake
    kubeletVersion: fake
    machineID: ""
    operatingSystem: linux
    osImage: ""
    systemUUID: ""
  phase: Running
{{- end }}
{{- end }}
